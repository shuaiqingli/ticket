<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.hengyu.ticket.dao.LineManageDao">
    <select id="totalCountForBindIntegralRule" parameterType="Page" resultType="long">
        select count(1)
        <include refid="findListForBindIntegralRule_where"/>
    </select>

    <select id="findListForBindIntegralRule" parameterType="Page" resultType="java.util.HashMap">
        select t1.*
        <include refid="findListForBindIntegralRule_where"/>
        limit #{startOfPage},#{pageSize}
    </select>

    <sql id="findListForBindIntegralRule_where">
        from line_manage t1
        LEFT JOIN integral_rule_line t2 on t1.ID=t2.LMID and t2.IRID=#{param.id}
        where t2.LMID is null
        <if test="param.keyword != null">
            and ( t1.LineID LIKE CONCAT('%',#{param.keyword},'%') or
            t1.LineName LIKE CONCAT('%',#{param.keyword},'%') or
            t1.TransCompany LIKE CONCAT('%',#{param.keyword},'%'))
        </if>
    </sql>

    <select id="totalCountForBindShowTime" parameterType="Page" resultType="long">
        select count(1)
        <include refid="findListForBindShowTime_where"/>
    </select>

    <select id="findListForBindShowTime" parameterType="Page" resultMap="result_map">
        select t1.*
        <include refid="findListForBindShowTime_where"/>
        limit #{startOfPage},#{pageSize}
    </select>

    <sql id="findListForBindShowTime_where">
        from line_manage t1
        LEFT JOIN show_time_line t2 on t1.ID=t2.LMID and t2.STID=#{param.id}
        where t2.ID is null
        <if test="param.keyword != null">
            and ( t1.LineID LIKE CONCAT('%',#{param.keyword},'%') or
            t1.LineName LIKE CONCAT('%',#{param.keyword},'%') or
            t1.TransCompany LIKE CONCAT('%',#{param.keyword},'%'))
        </if>
    </sql>

    <select id="findLineListBySTID" resultType="java.util.HashMap">
		select t1.* from line_manage t1, show_time_line t2 where t1.ID=t2.LMID and t2.STID=#{stid}
	</select>

    <delete id="delInvalidLineList">
		delete from admin_line where LMID=#{lmid} and UserID not in (
			select DISTINCT UserID from relation_station where STID in
		   (
			   select STID from line_manage_station where LMID=#{lmid}
		   )
		)
	</delete>

    <select id="getUseridListForAutoAssociateByLmid" resultType="java.lang.String">
		select DISTINCT t1.UserID from
		(
			select DISTINCT t1.UserID from relation_station t1,admin t2 where t1.UserID=t2.UserID
			and (t2.IsAutoBindLine is NULL or t2.IsAutoBindLine = '1') and t1.STID in
			(
				select STID from line_manage_station where LMID=#{lmid} and Sort=0
			)
		) t1 LEFT JOIN admin_line t2 on t1.UserID=t2.UserID and t2.LMID=#{lmid} where t2.ID is null
	</select>

    <delete id="unbindUserListToLine">
		delete from admin_line where LMID=#{lmid}
	</delete>

    <select id="findListByUserid" parameterType="java.lang.String" resultType="java.util.HashMap">
		select t1.* from line_manage t1, admin_line t2 where t1.ID=t2.LMID and t2.UserID=#{userid}
	</select>

    <select id="totalCountForBindAdmin" parameterType="Page" resultType="long">
        select count(1)
        <include refid="findListForBindAdmin_where"/>
    </select>

    <select id="findListForBindAdmin" parameterType="Page" resultMap="result_map">
        select t3.*
        <include refid="findListForBindAdmin_where"/>
        limit #{startOfPage},#{pageSize}
    </select>

    <sql id="findListForBindAdmin_where">
        from line_manage t3
        LEFT JOIN admin_line t4 on t3.ID=t4.LMID and t4.UserID=#{param.userid}
        where t4.ID is null and
        (t3.ID in
        (select LMID from line_manage_station t1,relation_station t2 where t2.UserID=#{param.userid} and t1.STID =
        t2.STID GROUP BY LMID)
        or
        t3.ID in
        (select t1.ID from line_manage t1,relation_station t2 where t2.UserID=#{param.userid} GROUP BY t1.ID)
        )
        <if test="param.keyword != null">
            and ( t3.LineID LIKE CONCAT('%',#{param.keyword},'%') or
            t3.LineName LIKE CONCAT('%',#{param.keyword},'%') or
            t3.TransCompany LIKE CONCAT('%',#{param.keyword},'%'))
        </if>
    </sql>

    <select id="totalCountForBindProhibit" parameterType="Page" resultType="long">
        select count(1)
        <include refid="findListForBindProhibit_where"/>
    </select>

    <select id="findListForBindProhibit" parameterType="Page" resultType="java.util.HashMap">
        select t3.*
        <include refid="findListForBindProhibit_where"/>
        limit #{startOfPage},#{pageSize}
    </select>

    <sql id="findListForBindProhibit_where">
        from line_manage t3
        LEFT JOIN prohibit_line t4 on t3.ID=t4.LMID and t4.PTID=#{param.id}
        where t4.ID is null and t3.ID in
        (
        select LMID from ticket_line t1,prohibit_ticket t2 where t2.ID=#{param.id} and t1.STStartID=t2.STID GROUP BY
        LMID
        )
        <if test="param.keyword != null">
            and ( t3.LineID LIKE CONCAT('%',#{param.keyword},'%') or
            t3.LineName LIKE CONCAT('%',#{param.keyword},'%') or
            t3.TransCompany LIKE CONCAT('%',#{param.keyword},'%'))
        </if>
    </sql>

    <select id="findLineListByGroupID" resultMap="result_map">
		select * from line_manage where GroupID=#{groupid}
	</select>
    <select id="findLineListBySingleLineID" resultMap="result_map">
		select * from line_manage where GroupID in (select GroupID from line_manage where id=#{id})
	</select>

    <select id="checkForBindDriverToLine" resultType="long">
        select count(1) from driver t1
        LEFT JOIN line_driver t2 ON t1.ID=t2.DriverID
        where t1.ID=#{driverid}
        <if test="type == 1">
            and t2.ID is not null
        </if>
        <if test="type == 2">
            and ( (t2.ID is not null and t2.type = '1') or (t2.ID is not null and t2.type = '2' and t2.GroupID =
            #{groupid}))
        </if>

        <!--select count(1) from
        (select t1.* from driver t1 LEFT JOIN line_driver t2 ON t1.ID=t2.DriverID and t2.GroupID = #{groupid} where t2.ID is null) t
        LEFT JOIN line_driver t3 ON t.ID=t3.DriverID
        where t.ID=#{driverid}
        <if test="type == 1">
            and t3.ID is null
        </if>
        <if test="type == 2">
            and ( t3.ID is null or t3.Type = '2' )
        </if>-->
    </select>
    <insert id="bindDriverToLine">
		insert into line_driver(
			DriverID, GroupID, Type
		)values(
			#{driverid}, #{groupid}, #{type}
		)
	</insert>

    <delete id="unbindDriverToLine">
		delete from line_driver where GroupID=#{groupid} and DriverID=#{driverid}
	</delete>

    <update id="bindPlateToLineDriver">
		update line_driver set PlateID=#{plateid} where GroupID=#{groupid} and DriverID=#{driverid}
	</update>

    <update id="unbindPlateToLineDriver">
		update line_driver set PlateID=NULL where GroupID=#{groupid} and PlateID=#{plateid}
	</update>

    <delete id="delDriverByGroupId" parameterType="string">
		delete from  line_driver where  GroupID=#{groupid}
	</delete>
    <delete id="delPlateByGroupId" parameterType="string">
		delete from  line_plate where  GroupID=#{groupid}
	</delete>

    <insert id="bindPlateToLine" parameterType="java.util.HashMap">
		INSERT INTO line_plate (
		PlateID, GroupID
		) VALUES (
		#{plateid}, #{groupid}
		)
	</insert>

    <delete id="unbindPlateToLine" parameterType="java.util.HashMap">
		DELETE FROM line_plate
		WHERE GroupID = #{groupid} AND PlateID = #{plateid}
	</delete>

    <insert id="save" parameterType="LineManage" useGeneratedKeys="true"
            keyProperty="id">
        insert
        into
        line_manage
        (
        <include refid="columns"/>
        )
        values
        (
        <include refid="propertys"/>
        )
    </insert>
    <update id="update" parameterType="LineManage">
	update
		line_manage
	set
		`GroupID`=#{groupid},
		`LineID`=#{lineid},
		`LineName`=#{linename},
        `refundstatus` = #{refundstatus},
		`refundremark` = #{refundremark},
		`Memo`=#{memo},
		`CityStartID`=#{citystartid},
		`CityStartName`=#{citystartname},
		`CityArriveID`=#{cityarriveid},
		`CityArriveName`=#{cityarrivename},
		`BalanceTicketWarn`=#{balanceticketwarn},
		`TCID`=#{tcid},
		`TransCompany`=#{transcompany},
		`DriverQuantity`=#{driverquantity},
		`CarModelID`=#{carmodelid},
		`CarModelName`=#{carmodelname},
		`ReleaseDay`=#{releaseday},
		`MakeID`=#{makeid},
		`MakeName`=#{makename},
		`MakeDate`=#{makedate},
        `CouponFlag`=#{couponflag}
	where
		ID=#{id}
  </update>
    <update id="updateNotNull" parameterType="LineManage">
        update
        line_manage
        set
        ID=#{id}
        <if test="releaseday!=null">
            ,`releaseday`=#{releaseday}
        </if>
        where
        ID=#{id}
    </update>
    <select id="find" parameterType="LineManage" resultMap="result_map">
	select
		*
	from
		line_manage

	where
		ID=#{id}
  </select>

    <select id="findByIdTcid" resultMap="result_map">
        select
        *
        from
        line_manage
        where
        ID=#{lm.id}
        <if test="admin != null and admin.isAdmin != 1">
            tcid = #{admin.tcid}
        </if>
    </select>
    <select id="findLinePriceByLineId" parameterType="java.lang.String" resultMap="result_map2">
        select
        lm.*,
        <include refid="com.hengyu.ticket.dao.LinePriceDao.pre_columns"></include>
        from
        line_manage as lm
        join
        line_price as lp
        on
        lp.`LineID` = lm.`LineID`
        where
        lm.`LineID`=#{lineid}
        order by
        lp.PriceSort
    </select>
    <select id="checkExist" parameterType="LineManage" resultType="long">
        select
        ifnull(count(1),0)
        from
        line_manage
        <where>
            <if test="lineid != null and lineid != '' ">
                `LineID`=#{lineid}
                <if test="id != null">
                    and `ID` not in(#{id})
                </if>
            </if>
        </where>
    </select>
    <select id="findList" parameterType="Page" resultMap="result_map2">
        select
        lm.id,lm.`lineid`,lm.`linename`,
        c1.cityname as citystartname,
        c2.cityname as cityarrivename,
        c.shortname as `transcompany`,
        lm.`releaseday`,lm.`groupid`,
        max(if(ts.isrelease is NULL ,NULL ,s.ridedate)) as lastticketdate,
        max(s.ridedate) as lastshiftdate
        from
        line_manage as lm
        left join shift as s on s.lmid = lm.id
        left join ticket_store as ts on ts.shiftid = s.id and ts.isrelease = 1
        <include refid="findList_where"></include>
        group by lm.id
        order by
          lm.`MakeDate` desc,groupid
        desc
        limit
        #{startOfPage},#{pageSize}
    </select>
    <select id="selectLastShiftDateByLMID" resultType="string">
  	select max(ss.RideDate) as lastshiftdate from shift_start as ss where ss.lmid = #{lmid}
  </select>
    <select id="selectLastTicketDateByLMID" resultType="string">
  	select max(ts.ticketdate) as lastticketdate from ticket_store as ts where ts.lmid = #{lmid} and (ts.isapprove  = 1 or ts.isapprove=2)
  </select>
    <select id="selectLineScheduleByLMID" resultMap="com.hengyu.ticket.dao.LineSchedueDao.result_map">
        select min(begindate) as begindate,max(enddate) as enddate from line_schedue as ls
        where ls.lmid = #{lmid} and ls.enddate <![CDATA[>=]]> current_date()
        <!--   	 between  ls.begindate  and  ls.enddate  -->
    </select>


    <select id="totalCount" parameterType="Page" resultType="long">
        select
        count(1)
        from
        line_manage as lm
        <include refid="findList_where"></include>
    </select>
    <select id="findApproveLines" resultMap="result_map2">
        select
        lm.*,
        <include refid="com.hengyu.ticket.dao.LineManageStationDao.pre_columns"/>
        from
        line_manage as lm
        inner join
        line_schedue as ls
        on
        lm.ID = ls.LMID
        left join
        line_manage_station as lms
        on
        lms.LMID = lm.id
        left join
        line_price as lp
        on
        lp.LineID = lm.lineID
        where
        lm.IsApprove = 1
        order by
        lms.Sort,lms.SortNum
        asc
    </select>

    <select id="findReleaseLines" resultMap="result_map">
  	select
		lm.*
	from
		line_manage as lm
  </select>

    <sql id="findList_where">
        join city_station as c1 on c1.id = lm.citystartid
        join city_station as c2 on c2.id = lm.cityarriveid
        join company as c on c.id = lm.tcid
        where 1=1
        <if test="param!=null and param.linename !=null and param.linename !='' ">
            and(
            lm.`lineid`
            like concat('%',#{param.linename},'%')
            or
            lm.`transcompany` like
            concat('%',#{param.linename},'%')
            )
        </if>
        <if test="admin.isAdmin == null or admin.isAdmin == 0  ">
            and lm.`id`
            in(
            <include refid="com.hengyu.ticket.dao.AdminDao.admin_power_lines"></include>
            )
        </if>
    </sql>
    <select id="getWayStation" parameterType="java.lang.Integer"
            resultType="map">
		select lms.stid,lms.stname,lms.sortnum from line_manage as
		lm,line_manage_station
		as lms where lm.id=lms.lmid and
		lm.id=#{lmid} and lms.sort=0 group by lms.stid
	</select>
    <select id="getLineidBySCS" parameterType="map" resultMap="result_map">
		select * from line_manage where CityStartID=#{citystartid} 
		and CityArriveID=#{cityarriveid} order by id desc  limit 1
	</select>
    <select id="getAllLine" parameterType="map" resultMap="result_map">
	select
	*
	from
	line_manage as lm 
	where lm.isapprove=1 
	order by 
		lm.ID  
	desc
	limit
	#{startpage},#{pagesize}
  </select>

    <select id="findByGroupId" parameterType="string" resultMap="result_map">
  	select * from line_manage where groupid = #{groupid}
  </select>

    <select id="findRefundRemark" resultType="LineManage">
      select refundstatus,refundremark from line_manage where id = #{id}
    </select>
    <select id="getRequireTime" resultType="java.lang.Integer">
        SELECT max(requiretime) from line_manage_station where lmid = #{id}
    </select>

    <delete id="delByGroupId">
  	delete from line_manage where GroupID = #{groupid}
    </delete>
    <delete id="delLineManageStationByGroupId">
        delete from line_manage_station where STRID in(
        select id from station_time_rule where lmid in(
        <include refid="getLMIDByGroupID"></include>
        )
        )
    </delete>
    <delete id="delLineStationTimeRule">
        delete from station_time_rule where lmid in(
        <include refid="getLMIDByGroupID"></include>
        )
    </delete>
    <delete id="delTicketStore">
        delete from ticket_store where shiftid in(
        <include refid="getShiftIDByGroupID"></include>
        )
    </delete>
    <delete id="delTicketLine">
        delete from ticket_line where shiftid in(
        <include refid="getShiftIDByGroupID"></include>
        )
    </delete>
    <delete id="delShift">
        delete from shift where lmid in(
        <include refid="getLMIDByGroupID"></include>
        )
    </delete>
    <delete id="delShiftStart">
        delete from shift_start where shiftid in(
        <include refid="getShiftIDByGroupID"></include>
        )
    </delete>

    <sql id="getLMIDByGroupID">
        select id from line_manage where GroupID = #{groupid}
    </sql>

    <sql id="getShiftIDByGroupID">
        SELECT id from shift where lmid in(
        <include refid="getLMIDByGroupID"></include>
        )
    </sql>


    <sql id="columns">
	`GroupID`,
	`LineID`,
    `refundstatus`,
    `refundremark`,
	`LineName`,
	`Memo`,
	`CityStartID`,
	`CityStartName`,
	`CityArriveID`,
	`CityArriveName`,
	`BalanceTicketWarn`,
	`TCID`,
	`TransCompany`,
	`DriverQuantity`,
	`CarModelID`,
	`CarModelName`,
	`ReleaseDay`,
	`MakeID`,
	`MakeName`,
	`MakeDate`,
    `CouponFlag`
  </sql>
    <sql id="propertys">
		#{groupid},
		#{lineid},
        #{refundstatus},
		#{refundremark},
		#{linename},
		#{memo},
		#{citystartid},
		#{citystartname},
		#{cityarriveid},
		#{cityarrivename},
		#{balanceticketwarn},
		#{tcid},
		#{transcompany},
		#{driverquantity},
		#{carmodelid},
		#{carmodelname},
		#{releaseday},
		#{makeid},
		#{makename},
		#{makedate},
        #{couponflag}
	</sql>
    <resultMap id="result_map" type="LineManage">
        <id column="ID" property="id" javaType="java.lang.Integer"/>
        <result column="GroupID" property="groupid" javaType="java.lang.String"/>
        <result column="LineID" property="lineid" javaType="java.lang.String"/>
        <result column="LineName" property="linename" javaType="java.lang.String"/>
        <result column="Memo" property="memo" javaType="java.lang.String"/>
        <result column="CityStartID" property="citystartid" javaType="java.lang.String"/>
        <result column="CityStartName" property="citystartname" javaType="java.lang.String"/>
        <result column="CityArriveID" property="cityarriveid" javaType="java.lang.String"/>
        <result column="CityArriveName" property="cityarrivename" javaType="java.lang.String"/>
        <result column="BalanceTicketWarn" property="balanceticketwarn" javaType="java.lang.Integer"/>
        <result column="TCID" property="tcid" javaType="java.lang.Integer"/>
        <result column="TransCompany" property="transcompany" javaType="java.lang.String"/>
        <result column="DriverQuantity" property="driverquantity" javaType="java.lang.Integer"/>
        <result column="CarModelID" property="carmodelid" javaType="java.lang.Integer"/>
        <result column="CarModelName" property="carmodelname" javaType="java.lang.String"/>
        <result column="ReleaseDay" property="releaseday" javaType="java.lang.Integer"/>
        <result column="MakeID" property="makeid" javaType="java.lang.String"/>
        <result column="MakeName" property="makename" javaType="java.lang.String"/>
        <result column="MakeDate" property="makedate" javaType="java.lang.String"/>
        <result column="refuntdremark" property="refundremark"/>
        <result column="refundstatus" property="refundstatus"/>
        <result column="CouponFlag" property="couponflag"/>
    </resultMap>

    <resultMap type="LineManage" id="result_map2" extends="result_map">
        <!--<association property="lastshiftdate" column="id" select="selectLastShiftDateByLMID"></association>-->
        <!--<association property="lastticketdate" column="id" select="selectLastTicketDateByLMID"></association>-->
        <!--<collection property="lineSchedues" column="id" columnPrefix="ls_" select="selectLineScheduleByLMID"></collection>-->
    </resultMap>
</mapper>
